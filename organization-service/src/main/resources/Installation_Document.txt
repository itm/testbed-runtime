Date: august 9th 2013
Author: Nguyen Kim Thuat (CEA LIST)



Installation document



Overview

This document explains how to use the SNAA implementation based on certificate’s approach. Our modification to the testbed code base has three main components:


- An SNAA implementation that is called SNAACertificate, that is similar to ShiroSNAA, and that is consistent with the certificate extension for authentication and authorization, which can be found at: 
/testbed-runtime/snaa/src/main/java/eu/smartsantander/cea/certificate/*


- An organization service implementation, that is servlet-based, and that the organization administrator(s) should run on his (their) organization behalf. It can be found at:
/testbed-runtime/organization-service/*


- client-certificate: A library for developing clients that are consistent with the above organization service and SNAACertificate (and that is including a simple client for tests) and
it is located at:
/testbed-runtime/client-certificate


At this document’s date, the above implementation are only available at https://github.com/pierre128 where a fork of https://github.com/itm/testbed-runtime/ has been done (a pull request to this later project is pending). 


Installing the application

1. Required Software

The following software is required to run the test cases using this implementation:
- Java platform, standard edition 
- Maven (version 3.04+)
- Glassfish server, version 3.1+


2. Database configuration

It is necessary to create two database before running the test cases. One database is used for the SNAACertificate implementation, the other is used for the organization. These scripts can be found at: 
- /testbed-runtime/snaa/src/main/resources/create_shiro_db.sql
- /testbed-runtime/organization-service/src/main/resources/idpDB.sql

3. Testing the SNAACertificate implementation

3.1 Test scenario

In our scenario, we defined a simple organization, which of name is “Organization1”. This organization has three user: Administrator1, Experimenter1, ServiceProvider1 who have relatively the 	    roles: ADMNISTRATOR, EXPERIMENTER and SERVICEPROVIDER.
The testbed has already saved an example of organization certificate, which is stored in the directory /snaa/certs/Organization1/organization.cer

The directory /testbed-runtime/snaa/certs contains also an example of keystore and truststore. The keystore contains the key pairs which are used to generate the organization certificate. On the other hand, the trust store contains all the certificate that the testbed trusts. The detailed steps for generating the organization certificate can be found at section 4 of this document.

3.2 Installing components

* client-certificate: This library is an independent maven project, it is used by snaa and the organization service, so it must be packaged in a single jar by using this command: 

	mvn clean install 

This jar file will be referenced in the pom.xml of the snaa module and organization-service module by adding this dependency:

	<dependency>
		<groupId>fr.cea.util</groupId>
		<artifactId>client-certificate</artifactId>
		<version>1.0-SNAPSHOT</version>
	</dependency>

* organization-service: This module can be deployed in any web server. In our example, it is deployed in the Glassfish server by using the embedded-glassfish maven plugin.
Make sure that the glassfish server is installed and started. To start the GlassFish Server from the command line, open a terminal window or command prompt and execute the following:

	asadmin start-domain --verbose	
	(asadmin is located at ../glassfish3/bin)

We can run the organization service by using this command: 
	mvn embedded-glassfish:run

Besides, this plugin is also useful to deploy, undeploy the application with these similar commands:
 
	mvn embedded-glassfish:deploy, mvn embedbbed-glassfish:undeploy


To verify that the service is online, enter this url in the browser:
                http://localhost:8088/organization-service/
        
if you are using tomcat6 (untested with tomcat7), it is also easy to deploy the application with the help of tomcat maven plugin. There are some configurations that you have to do:

* Make sure that you have an user with administrator access right for Tomcat. To add Tomcat user, edit this file – “%TOMCAT_PATH%/conf/tomcat-users.xml“:
	<?xml version='1.0' encoding='utf-8'?>
	<tomcat-users>
		<role rolename="manager"/>
		<role rolename="admin"/>
		<user username="admin" password="admin" roles="admin,manager"/>
	</tomcat-users>

* In Maven side, you need to add the same user authentication information in “%MAVEN_PATH%/conf/settings.xml“:

	//...
	<server>
	        <id>tomcatServer</id>
	        <username>admin</username>
	        <password>admin</password>
	</server>
	//...


* Finally, declare “Maven-Tomcat plugin” and related Tomcat server detail in your pom.xml file:
        
	<plugin>
        	<groupId>org.codehaus.mojo</groupId>
        	<artifactId>tomcat-maven-plugin</artifactId>
        	<configuration>
                <url>http://localhost:8080/manager</url>
                <server>TomcatServer</server>
                <path>/organization-service</path>
        	</configuration>
	</plugin>


Run mvn tomcat:deploy to package the project in a war file, it is then deployed in the tomcat server. To verify it, re-enter this url in the browser:
	http://localhost:8088/organization-service/


* SNAACertificate implementation: This implementation have already added in the code source of testbed-runtime. We can launch this service using the similar way that we use for others SNAA implementations in testbed.
Indeed, we can use this simple command to launch the SNAACertificate service, in the snaa directory:
        mvn exec:java -Dexec.mainClass="de.uniluebeck.itm.tr.snaSNAAServer" -Dexec.args="--config snaa-certificate-shiro-mysql.properties"

The properties file that we use here has the following content:

	urnprefix                                        = urn:wisebed:uzl2:
	port                                                     = 8890
	snaa.type                                        = CERTIFICATE
	snaa.context_path                              = /soap/v3/snaa
	snaa.shiro.jpa.properties_file         = snaa-shiro-mysql.jpa.properties

3.3 Using the SNAAClient

To use the SNAAClient and verify the behavior of SNAACertificate, these steps are necessary:

* Setup the two databases of SNAA and organization (see section 2) 

* Compile the client-certificate, so that the jar file will be generated in the local repository. It is then used by the snaacertificate and organization service.

* Change the attribute pathToKeyStoreFile in the organization-service/src/resources/config.properties depending on your operating system:

Ex: if you are on Linux
#*****************************************************
# SAML Configuration
#****************************************************/
# Defaut in minute
samlMaxSessionTimeout= 10




#**********************************************************
# Key store configuration for generating SAML Assertion
#**********************************************************/
certificateAliasName=organization-alias
pathToKeyStoreFile=/home/nguyenkimthuat/Kim/FORK/testbed-runtime/snaa/certs/keystore/keystore.jks # To modify
keystorePassword=changeit




#*********************************************************
# Organization DB Configuration
#*********************************************************/
organizationDbUrl=jdbc\:mysql\://localhost\:3306/tr_organization
organizationDB_username=trorg
organizationDB_password=trorg




#*****************************************************************
# The directory name that we use to stock the client's public key
#*****************************************************************/
clientPubKeyDirectoryName=keys


if you are on Window, this value should be:
pathToKeyStoreFile=C:\testbed-runtime\snaa\certs\keystore\keystore.jks
Below is the explication for the function of each attribute:
* organizationDbUrl: The url to access the organization database
* certificateAliasName: The alias name when we create the certificate for the organization, in this exemple, it doesn't need to change
* pathToKeyStoreFile: The path to the keystore, change it to some thing like: ../../testbed-runtime/snaa/certs/keystore/keystore.jks
* keystorePassword: The password that keystore use to protect the private key, by defaut, it is "changeit".
* organizationDB_username: Username to access to the organization database, in this case, we use: trorg
* organizationDB_password: Password to access to the organization database, in this case, we use: trorg


Note that the keystore is now saved in the directory /snaa/certs/keystore/keystore.jks for the testing purpose only, it should be located at the organization repository because it is used to generate the SAML Assertion.

* Set the organization-service on line using (make sure that the glassfish server or tomcat6 is started):
		mvn embedded-glassfish:deploy
	or 
		mvn tomcat:deploy

* Launch the SNAACertificate service 
mvn exec:java -Dexec.mainClass="de.uniluebeck.itm.tr.snaa.SNAAServer" -Dexec.args="--config snaa-certificate-shiro-mysql.properties"

* Go to client-certificate directory to test our client. To initiate the client test, use one of these two commands:


	* To test the authentication
		mvn exec:java -Dexec.mainClass="eu.smartsantander.cea.utils.client.SNAAClient" -Dexec.args="-authenticate cert_shiro.properties"

	* To test the authorization
		mvn exec:java -Dexec.mainClass="eu.smartsantander.cea.utils.client.SNAAClient" -Dexec.args="-authorize cert_shiro.properties"

	The file “cert_shiro.properties” provides some information to launch the test:


		userId=Administrator1
		organizationId=Organization1
		nodeUrnPrefix=urn:wisebed:uzl2:
		nodeUrns=urn:wisebed:uzl2:0x2215,urn:wisebed:uzl2:0x2211
		idpUrl=http://localhost:8080/organization-service/ProcessRequest
		action=SM_GET_SUPPORTED_CHANNEL_HANDLERS
		pathPrivateKey=/home/nguyenkimthuat/Kim/FORK/testbed-runtime/client-certificate/client_private_key/pkcs8_key


	The attribute pathPrivateKey show the path to the client’s private key, which is on the directory "client_private_key",it is used to authenticate the client to the organization. The idpUrl is the address of the organization portal.


4. Generate certificate using keytool
This section describe how to use keytool to generate the certificate for the organization


The keytool utility stores the keys and certificates in a file that is call a keystore, a repository of certificates used for identifying a client or a server. Typically, a keystore is a file that contains one client’s or one server’s identity. The keystore protects private keys by using a password.


The general steps for creating a server certificate are as follows.


 1. Create the keystore.


 2. Export the certificate from the keystore.


 3. Sign the certificate: We use the self-signed certificate in the developement mode. This step can be ignored


 4. Import the certificate into a truststore: a repository of certificates from parties with which you expect to communicate or from Certificate Authorities that you trust to identify parties. The truststore is used by the client to verify the certificate that is sent by the server. A truststore typically contains more than one certificate.


We will give in the following section an example of generating a certificate for an organization:


    1. Create the keystore
    Type the keytool command all on one line:


    keytool -genkey -alias organization-alias -keyalg RSA -keypass changeit -storepass changeit -keystore keystore.jks


    We named here the keystore "keystore.jks", and the alias "organization-alias", they can be changed.
    When you press Enter, keytool prompts you to enter the server name, organizational unit, organization, locality, state, and country code.You must type the server name in response to keytool’s  first prompt, in which it asks for first and last names. For testing purposes, this can be anything you want.


    In this example, we use these information:
    Quels sont vos prénom et nom ?
      [Unknown] :  organization
    Quel est le nom de votre unité organisationnelle ?
      [Unknown] :  cea
    Quelle est le nom de votre organisation ?
      [Unknown] :  cea
    Quel est le nom de votre ville de résidence ?
      [Unknown] :  Paris, France
    Quel est le nom de votre état ou province ?
      [Unknown] :  France
    Quel est le code de pays à deux lettres pour cette unité ?
      [Unknown] :  FR
    Est-ce CN=organization, OU=cea, O=cea, L="Paris, France", ST=France, C=FR ?
      [non] :  oui


    2. Export the generated certificate in keystore.jks into the file organization.cer


    keytool -export -alias organization-alias -storepass changeit -file organization.cer -keystore keystore.jks


     3. Sign the organization certificate by CA (This step is ignored in our scenario)


     4. Import the certificate to a truststore so that the testbed, can verify that the organization certificate is trusted or not. To add the organization certificate to the truststore file cacerts.jks, run the following keytool command:
keytool -import -v -trustcacerts -alias organization-alias
-file organization.cer -keystore cacerts.jks -keypass changeit -storepass changeit


Information on the certificate, such as that shown next, will appear:


Propriétaire : CN=organization, OU=cea, O=cea, L="Paris, France", ST=France, C=FR
Émetteur : CN=organization, OU=cea, O=cea, L="Paris, France", ST=France, C=FR
Numéro de série : 5204aadd
Valide du : Fri Aug 09 10:39:57 CEST 2013 au : Thu Nov 07 09:39:57 CET 2013
Empreintes du certificat :
     MD5 :  9D:8C:0F:74:65:D9:86:62:B9:5D:BA:ED:61:AC:AC:4F
     SHA1 : 09:03:0C:4A:51:BE:70:83:4A:70:F3:A2:E6:49:45:00:53:C9:8D:43
     Nom de lalgorithme de signature : {7}
     Version : {8}
Faire confiance à ce certificat ? [non] :


  5. Type yes and press enter or return key


Certificat ajouté au Keystore
[Stockage de cacerts.jks]
